"use client"

import { useMemo } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover"
import { ChartTooltip } from "@/components/ui/chart"
import {
  BarChart,
  Bar,
  XAxis,
  YAxis,
  CartesianGrid,
  PieChart,
  Pie,
  Cell,
  LineChart,
  Line,
  Area,
  AreaChart,
  Legend,
  ResponsiveContainer,
  LabelList,
} from "recharts"
import { TrendingUp, TrendingDown, AlertTriangle, Shield, Calendar, Zap, Info, HelpCircle } from "lucide-react"
import type { Vulnerability } from "@/types/vulnerability"

interface VulnerabilityChartsProps {
  vulnerabilities: Vulnerability[]
  getSeverityLevel: (vuln: Vulnerability) => string
}

// Modern color palette
const SEVERITY_COLORS = {
  critical: "#dc2626", // Red-600
  high: "#ea580c", // Orange-600
  medium: "#d97706", // Amber-600
  low: "#059669", // Emerald-600
}

const CHART_COLORS = {
  primary: "#1e293b", // Slate-800
  secondary: "#64748b", // Slate-500
  accent: "#3b82f6", // Blue-500
  success: "#10b981", // Emerald-500
  warning: "#f59e0b", // Amber-500
  danger: "#ef4444", // Red-500
  purple: "#8b5cf6", // Violet-500
  indigo: "#6366f1", // Indigo-500
}

// Chart information content
const CHART_INFO = {
  severity: {
    title: "Severity Distribution",
    description:
      "Shows the breakdown of vulnerabilities by severity level. Critical and High severity vulnerabilities require immediate attention.",
    insights: [
      "Critical: Remote code execution, system compromise",
      "High: Privilege escalation, authentication bypass",
      "Medium: Information disclosure, DoS attacks",
      "Low: Minor security issues with limited impact",
    ],
  },
  dueDate: {
    title: "Due Date Status",
    description: "Tracks vulnerability remediation deadlines to ensure SLA compliance and prioritize urgent fixes.",
    insights: [
      "Overdue: Past remediation deadline - immediate action required",
      "Due Soon: Within 7 days - high priority",
      "This Month: Within 30 days - medium priority",
      "Future: Beyond 30 days - plan accordingly",
    ],
  },
  ransomware: {
    title: "Ransomware Campaign Usage",
    description:
      "Identifies vulnerabilities actively exploited by ransomware groups, indicating higher risk and urgency.",
    insights: [
      "Known: Confirmed ransomware exploitation - critical priority",
      "Unknown: No known ransomware usage - standard priority",
      "Monitor threat intelligence for status changes",
    ],
  },
  trend: {
    title: "Monthly Vulnerability Trend",
    description: "Displays the volume of new vulnerabilities added over time to identify patterns and workload trends.",
    insights: [
      "Track monthly vulnerability discovery rates",
      "Identify seasonal patterns or spikes",
      "Plan resource allocation based on trends",
      "Monitor overall security posture improvement",
    ],
  },
  vendors: {
    title: "Top Affected Vendors",
    description:
      "Shows which vendors have the most vulnerabilities, helping prioritize vendor risk management and patching efforts.",
    insights: [
      "Focus patching efforts on high-count vendors",
      "Assess vendor security practices",
      "Consider alternative solutions for problematic vendors",
      "Negotiate better security SLAs with top vendors",
    ],
  },
  severityTrend: {
    title: "Severity Trend Over Time",
    description:
      "Tracks how the severity distribution of vulnerabilities changes over time to assess threat landscape evolution.",
    insights: [
      "Monitor if critical vulnerabilities are increasing",
      "Assess effectiveness of security measures",
      "Identify concerning trends in threat severity",
      "Plan security strategy based on severity patterns",
    ],
  },
}

// Information Button Component
const InfoButton = ({ info }: { info: typeof CHART_INFO.severity }) => (
  <Popover>
    <PopoverTrigger asChild>
      <Button variant="ghost" size="sm" className="h-8 w-8 p-0 hover:bg-white/80 transition-colors">
        <HelpCircle className="h-4 w-4 text-slate-600 hover:text-slate-800" />
      </Button>
    </PopoverTrigger>
    <PopoverContent className="w-80 p-0" side="left">
      <div className="p-4">
        <div className="flex items-center gap-2 mb-3">
          <Info className="h-4 w-4 text-blue-600" />
          <h4 className="font-semibold text-slate-900">{info.title}</h4>
        </div>
        <p className="text-sm text-slate-700 mb-3 leading-relaxed">{info.description}</p>
        <div className="space-y-1">
          <p className="text-xs font-medium text-slate-600 uppercase tracking-wide">Key Insights:</p>
          {info.insights.map((insight, index) => (
            <p key={index} className="text-xs text-slate-600 leading-relaxed">
              â€¢ {insight}
            </p>
          ))}
        </div>
      </div>
    </PopoverContent>
  </Popover>
)

// Enhanced label component for pie charts
const renderCustomizedLabel = ({ cx, cy, midAngle, innerRadius, outerRadius, percent, name }: any) => {
  const RADIAN = Math.PI / 180
  const radius = innerRadius + (outerRadius - innerRadius) * 0.5
  const x = cx + radius * Math.cos(-midAngle * RADIAN)
  const y = cy + radius * Math.sin(-midAngle * RADIAN)

  if (percent < 0.05) return null

  return (
    <text
      x={x}
      y={y}
      fill="white"
      textAnchor={x > cx ? "start" : "end"}
      dominantBaseline="central"
      fontSize="13"
      fontWeight="600"
      fontFamily="Inter, system-ui, sans-serif"
    >
      {`${(percent * 100).toFixed(0)}%`}
    </text>
  )
}

// Enhanced tooltip for vendor chart
const CustomVendorTooltip = ({ active, payload, label }: any) => {
  if (active && payload && payload.length) {
    return (
      <div className="bg-white p-4 border border-gray-200 rounded-xl shadow-xl backdrop-blur-sm">
        <p className="font-semibold text-gray-900 text-sm">{`${label}`}</p>
        <p className="text-emerald-600 font-medium text-sm">{`${payload[0].value} vulnerabilities`}</p>
      </div>
    )
  }
  return null
}

export function VulnerabilityCharts({ vulnerabilities, getSeverityLevel }: VulnerabilityChartsProps) {
  const chartData = useMemo(() => {
    // Severity distribution
    const severityCount = vulnerabilities.reduce(
      (acc, vuln) => {
        const severity = getSeverityLevel(vuln)
        acc[severity] = (acc[severity] || 0) + 1
        return acc
      },
      {} as Record<string, number>,
    )

    const severityData = Object.entries(severityCount).map(([severity, count]) => ({
      name: severity.charAt(0).toUpperCase() + severity.slice(1),
      value: count,
      fill: SEVERITY_COLORS[severity as keyof typeof SEVERITY_COLORS],
    }))

    // Monthly trend data
    const monthlyData = vulnerabilities.reduce(
      (acc, vuln) => {
        const date = new Date(vuln.dateAdded)
        const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, "0")}`

        if (!acc[monthKey]) {
          acc[monthKey] = { month: monthKey, count: 0, critical: 0, high: 0, medium: 0, low: 0 }
        }

        acc[monthKey].count++
        const severity = getSeverityLevel(vuln)
        acc[monthKey][severity as keyof (typeof acc)[typeof monthKey]]++

        return acc
      },
      {} as Record<string, any>,
    )

    const trendData = Object.values(monthlyData)
      .sort((a, b) => a.month.localeCompare(b.month))
      .slice(-12)
      .map((item) => ({
        ...item,
        month: new Date(item.month + "-01").toLocaleDateString("en-US", { month: "short", year: "2-digit" }),
      }))

    // Vendor distribution (top 10)
    const vendorCount = vulnerabilities.reduce(
      (acc, vuln) => {
        const vendor = vuln.vendorProject.length > 18 ? vuln.vendorProject.substring(0, 18) + "..." : vuln.vendorProject
        acc[vendor] = (acc[vendor] || 0) + 1
        return acc
      },
      {} as Record<string, number>,
    )

    const vendorData = Object.entries(vendorCount)
      .sort(([, a], [, b]) => b - a)
      .slice(0, 10)
      .map(([vendor, count]) => ({ vendor, count }))

    // Ransomware data
    const ransomwareCount = vulnerabilities.reduce(
      (acc, vuln) => {
        const key = vuln.knownRansomwareCampaignUse === "Known" ? "Known" : "Unknown"
        acc[key] = (acc[key] || 0) + 1
        return acc
      },
      {} as Record<string, number>,
    )

    const ransomwareData = Object.entries(ransomwareCount).map(([status, count]) => ({
      name: status,
      value: count,
      fill: status === "Known" ? CHART_COLORS.danger : CHART_COLORS.secondary,
    }))

    // Due date analysis
    const today = new Date()
    const dueDateAnalysis = vulnerabilities.reduce(
      (acc, vuln) => {
        const dueDate = new Date(vuln.dueDate)
        const daysDiff = Math.ceil((dueDate.getTime() - today.getTime()) / (1000 * 60 * 60 * 24))

        if (daysDiff < 0) acc.overdue++
        else if (daysDiff <= 7) acc.dueSoon++
        else if (daysDiff <= 30) acc.dueThisMonth++
        else acc.future++

        return acc
      },
      { overdue: 0, dueSoon: 0, dueThisMonth: 0, future: 0 },
    )

    const dueDateData = [
      { name: "Overdue", value: dueDateAnalysis.overdue, fill: CHART_COLORS.danger },
      { name: "Due Soon", value: dueDateAnalysis.dueSoon, fill: CHART_COLORS.warning },
      { name: "This Month", value: dueDateAnalysis.dueThisMonth, fill: CHART_COLORS.accent },
      { name: "Future", value: dueDateAnalysis.future, fill: CHART_COLORS.success },
    ]

    return {
      severityData,
      trendData,
      vendorData,
      ransomwareData,
      dueDateData,
    }
  }, [vulnerabilities, getSeverityLevel])

  return (
    <div className="space-y-8 font-['Inter',system-ui,sans-serif]">
      {/* Top Row - Key Metrics */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Severity Distribution */}
        <Card className="shadow-lg border-0 bg-gradient-to-br from-white to-red-50/30 hover:shadow-xl transition-all duration-300">
          <CardHeader className="bg-gradient-to-r from-red-500/10 to-orange-500/10 rounded-t-xl pb-4 border-b border-red-100">
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center space-x-3 text-slate-800 text-xl font-bold">
                <div className="p-2 bg-red-500 rounded-lg shadow-sm">
                  <AlertTriangle className="h-5 w-5 text-white" />
                </div>
                <span>Severity Distribution</span>
              </CardTitle>
              <InfoButton info={CHART_INFO.severity} />
            </div>
          </CardHeader>
          <CardContent className="p-6">
            <div className="h-[320px]">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={chartData.severityData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={renderCustomizedLabel}
                    outerRadius={100}
                    innerRadius={40}
                    fill="#8884d8"
                    dataKey="value"
                    strokeWidth={2}
                    stroke="#ffffff"
                  >
                    {chartData.severityData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.fill} />
                    ))}
                  </Pie>
                  <ChartTooltip
                    content={({ active, payload }) => {
                      if (active && payload && payload.length) {
                        const data = payload[0].payload
                        return (
                          <div className="bg-white p-4 border border-gray-200 rounded-xl shadow-xl backdrop-blur-sm">
                            <p className="font-bold text-gray-900 text-base">{`${data.name}: ${data.value}`}</p>
                            <p className="text-gray-600 font-medium">{`${((data.value / vulnerabilities.length) * 100).toFixed(1)}% of total`}</p>
                          </div>
                        )
                      }
                      return null
                    }}
                  />
                  <Legend
                    verticalAlign="bottom"
                    height={50}
                    wrapperStyle={{ paddingTop: "20px", fontSize: "14px", fontWeight: "600" }}
                    formatter={(value, entry) => (
                      <span style={{ color: entry.color, fontWeight: 600, fontSize: "14px" }}>{value}</span>
                    )}
                  />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Due Date Status */}
        <Card className="shadow-lg border-0 bg-gradient-to-br from-white to-amber-50/30 hover:shadow-xl transition-all duration-300">
          <CardHeader className="bg-gradient-to-r from-amber-500/10 to-yellow-500/10 rounded-t-xl pb-4 border-b border-amber-100">
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center space-x-3 text-slate-800 text-xl font-bold">
                <div className="p-2 bg-amber-500 rounded-lg shadow-sm">
                  <Calendar className="h-5 w-5 text-white" />
                </div>
                <span>Due Date Status</span>
              </CardTitle>
              <InfoButton info={CHART_INFO.dueDate} />
            </div>
          </CardHeader>
          <CardContent className="p-6">
            <div className="h-[320px]">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={chartData.dueDateData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={renderCustomizedLabel}
                    outerRadius={100}
                    innerRadius={40}
                    fill="#8884d8"
                    dataKey="value"
                    strokeWidth={2}
                    stroke="#ffffff"
                  >
                    {chartData.dueDateData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.fill} />
                    ))}
                  </Pie>
                  <ChartTooltip
                    content={({ active, payload }) => {
                      if (active && payload && payload.length) {
                        const data = payload[0].payload
                        return (
                          <div className="bg-white p-4 border border-gray-200 rounded-xl shadow-xl backdrop-blur-sm">
                            <p className="font-bold text-gray-900 text-base">{`${data.name}: ${data.value}`}</p>
                            <p className="text-gray-600 font-medium">{`${((data.value / vulnerabilities.length) * 100).toFixed(1)}% of total`}</p>
                          </div>
                        )
                      }
                      return null
                    }}
                  />
                  <Legend
                    verticalAlign="bottom"
                    height={50}
                    wrapperStyle={{ paddingTop: "20px", fontSize: "14px", fontWeight: "600" }}
                    formatter={(value, entry) => (
                      <span style={{ color: entry.color, fontWeight: 600, fontSize: "14px" }}>{value}</span>
                    )}
                  />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Ransomware Usage */}
        <Card className="shadow-lg border-0 bg-gradient-to-br from-white to-purple-50/30 hover:shadow-xl transition-all duration-300">
          <CardHeader className="bg-gradient-to-r from-purple-500/10 to-violet-500/10 rounded-t-xl pb-4 border-b border-purple-100">
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center space-x-3 text-slate-800 text-xl font-bold">
                <div className="p-2 bg-purple-500 rounded-lg shadow-sm">
                  <Zap className="h-5 w-5 text-white" />
                </div>
                <span>Ransomware Usage</span>
              </CardTitle>
              <InfoButton info={CHART_INFO.ransomware} />
            </div>
          </CardHeader>
          <CardContent className="p-6">
            <div className="h-[320px]">
              <ResponsiveContainer width="100%" height="100%">
                <PieChart>
                  <Pie
                    data={chartData.ransomwareData}
                    cx="50%"
                    cy="50%"
                    labelLine={false}
                    label={renderCustomizedLabel}
                    outerRadius={100}
                    innerRadius={40}
                    fill="#8884d8"
                    dataKey="value"
                    strokeWidth={2}
                    stroke="#ffffff"
                  >
                    {chartData.ransomwareData.map((entry, index) => (
                      <Cell key={`cell-${index}`} fill={entry.fill} />
                    ))}
                  </Pie>
                  <ChartTooltip
                    content={({ active, payload }) => {
                      if (active && payload && payload.length) {
                        const data = payload[0].payload
                        return (
                          <div className="bg-white p-4 border border-gray-200 rounded-xl shadow-xl backdrop-blur-sm">
                            <p className="font-bold text-gray-900 text-base">{`${data.name}: ${data.value}`}</p>
                            <p className="text-gray-600 font-medium">{`${((data.value / vulnerabilities.length) * 100).toFixed(1)}% of total`}</p>
                          </div>
                        )
                      }
                      return null
                    }}
                  />
                  <Legend
                    verticalAlign="bottom"
                    height={50}
                    wrapperStyle={{ paddingTop: "20px", fontSize: "14px", fontWeight: "600" }}
                    formatter={(value, entry) => (
                      <span style={{ color: entry.color, fontWeight: 600, fontSize: "14px" }}>{value}</span>
                    )}
                  />
                </PieChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Bottom Row - Trends and Details */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Monthly Trend */}
        <Card className="shadow-lg border-0 bg-gradient-to-br from-white to-blue-50/30 hover:shadow-xl transition-all duration-300">
          <CardHeader className="bg-gradient-to-r from-blue-500/10 to-indigo-500/10 rounded-t-xl pb-4 border-b border-blue-100">
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center space-x-3 text-slate-800 text-xl font-bold">
                <div className="p-2 bg-blue-500 rounded-lg shadow-sm">
                  <TrendingUp className="h-5 w-5 text-white" />
                </div>
                <span>Monthly Trend</span>
              </CardTitle>
              <InfoButton info={CHART_INFO.trend} />
            </div>
          </CardHeader>
          <CardContent className="p-6">
            <div className="h-[340px]">
              <ResponsiveContainer width="100%" height="100%">
                <AreaChart data={chartData.trendData}>
                  <defs>
                    <linearGradient id="colorTrend" x1="0" y1="0" x2="0" y2="1">
                      <stop offset="5%" stopColor={CHART_COLORS.accent} stopOpacity={0.3} />
                      <stop offset="95%" stopColor={CHART_COLORS.accent} stopOpacity={0.05} />
                    </linearGradient>
                  </defs>
                  <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" strokeWidth={1} />
                  <XAxis dataKey="month" stroke="#64748b" fontSize={13} fontWeight={500} tick={{ fill: "#64748b" }} />
                  <YAxis stroke="#64748b" fontSize={13} fontWeight={500} tick={{ fill: "#64748b" }} />
                  <ChartTooltip
                    content={({ active, payload, label }) => {
                      if (active && payload && payload.length) {
                        return (
                          <div className="bg-white p-4 border border-gray-200 rounded-xl shadow-xl backdrop-blur-sm">
                            <p className="font-bold text-gray-900 text-base mb-1">{`Month: ${label}`}</p>
                            <p className="text-blue-600 font-semibold text-base">{`Vulnerabilities: ${payload[0].value}`}</p>
                          </div>
                        )
                      }
                      return null
                    }}
                  />
                  <Area
                    type="monotone"
                    dataKey="count"
                    stroke={CHART_COLORS.accent}
                    fillOpacity={1}
                    fill="url(#colorTrend)"
                    strokeWidth={3}
                    dot={{ fill: CHART_COLORS.accent, strokeWidth: 2, r: 5 }}
                    activeDot={{ r: 7, stroke: CHART_COLORS.accent, strokeWidth: 2, fill: "#ffffff" }}
                  />
                </AreaChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>

        {/* Top Vendors */}
        <Card className="shadow-lg border-0 bg-gradient-to-br from-white to-emerald-50/30 hover:shadow-xl transition-all duration-300">
          <CardHeader className="bg-gradient-to-r from-emerald-500/10 to-green-500/10 rounded-t-xl pb-4 border-b border-emerald-100">
            <div className="flex items-center justify-between">
              <CardTitle className="flex items-center space-x-3 text-slate-800 text-xl font-bold">
                <div className="p-2 bg-emerald-500 rounded-lg shadow-sm">
                  <Shield className="h-5 w-5 text-white" />
                </div>
                <span>Top Affected Vendors</span>
              </CardTitle>
              <InfoButton info={CHART_INFO.vendors} />
            </div>
          </CardHeader>
          <CardContent className="p-6">
            <div className="h-[340px]">
              <ResponsiveContainer width="100%" height="100%">
                <BarChart
                  data={chartData.vendorData}
                  layout="horizontal"
                  margin={{ left: 90, right: 30, top: 20, bottom: 20 }}
                >
                  <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" strokeWidth={1} />
                  <XAxis type="number" stroke="#64748b" fontSize={13} fontWeight={500} tick={{ fill: "#64748b" }} />
                  <YAxis
                    type="category"
                    dataKey="vendor"
                    stroke="#64748b"
                    width={85}
                    fontSize={11}
                    fontWeight={500}
                    tick={{ fontSize: 11, fill: "#64748b" }}
                  />
                  <ChartTooltip content={<CustomVendorTooltip />} />
                  <Bar
                    dataKey="count"
                    fill={CHART_COLORS.success}
                    radius={[0, 6, 6, 0]}
                    stroke="#ffffff"
                    strokeWidth={1}
                  >
                    <LabelList dataKey="count" position="right" fontSize={12} fontWeight={600} fill="#64748b" />
                  </Bar>
                </BarChart>
              </ResponsiveContainer>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Severity Trend - Full Width */}
      <Card className="shadow-lg border-0 bg-gradient-to-br from-white to-slate-50/50 hover:shadow-xl transition-all duration-300">
        <CardHeader className="bg-gradient-to-r from-slate-500/10 to-gray-500/10 rounded-t-xl pb-4 border-b border-slate-100">
          <div className="flex items-center justify-between">
            <CardTitle className="flex items-center space-x-3 text-slate-800 text-xl font-bold">
              <div className="p-2 bg-slate-600 rounded-lg shadow-sm">
                <TrendingDown className="h-5 w-5 text-white" />
              </div>
              <span>Severity Trend Over Time</span>
            </CardTitle>
            <InfoButton info={CHART_INFO.severityTrend} />
          </div>
        </CardHeader>
        <CardContent className="p-6">
          <div className="h-[400px]">
            <ResponsiveContainer width="100%" height="100%">
              <LineChart data={chartData.trendData}>
                <CartesianGrid strokeDasharray="3 3" stroke="#e2e8f0" strokeWidth={1} />
                <XAxis dataKey="month" stroke="#64748b" fontSize={13} fontWeight={500} tick={{ fill: "#64748b" }} />
                <YAxis stroke="#64748b" fontSize={13} fontWeight={500} tick={{ fill: "#64748b" }} />
                <ChartTooltip
                  content={({ active, payload, label }) => {
                    if (active && payload && payload.length) {
                      return (
                        <div className="bg-white p-4 border border-gray-200 rounded-xl shadow-xl backdrop-blur-sm">
                          <p className="font-bold text-gray-900 text-base mb-3">{`Month: ${label}`}</p>
                          {payload.map((entry, index) => (
                            <p key={index} style={{ color: entry.color }} className="font-semibold text-sm">
                              {`${entry.name}: ${entry.value}`}
                            </p>
                          ))}
                        </div>
                      )
                    }
                    return null
                  }}
                />
                <Legend wrapperStyle={{ paddingTop: "20px", fontSize: "14px", fontWeight: "600" }} />
                <Line
                  type="monotone"
                  dataKey="critical"
                  stroke={SEVERITY_COLORS.critical}
                  strokeWidth={4}
                  dot={{ r: 6, fill: SEVERITY_COLORS.critical, strokeWidth: 2, stroke: "#ffffff" }}
                  activeDot={{ r: 8, stroke: SEVERITY_COLORS.critical, strokeWidth: 3, fill: "#ffffff" }}
                  name="Critical"
                />
                <Line
                  type="monotone"
                  dataKey="high"
                  stroke={SEVERITY_COLORS.high}
                  strokeWidth={4}
                  dot={{ r: 6, fill: SEVERITY_COLORS.high, strokeWidth: 2, stroke: "#ffffff" }}
                  activeDot={{ r: 8, stroke: SEVERITY_COLORS.high, strokeWidth: 3, fill: "#ffffff" }}
                  name="High"
                />
                <Line
                  type="monotone"
                  dataKey="medium"
                  stroke={SEVERITY_COLORS.medium}
                  strokeWidth={4}
                  dot={{ r: 6, fill: SEVERITY_COLORS.medium, strokeWidth: 2, stroke: "#ffffff" }}
                  activeDot={{ r: 8, stroke: SEVERITY_COLORS.medium, strokeWidth: 3, fill: "#ffffff" }}
                  name="Medium"
                />
                <Line
                  type="monotone"
                  dataKey="low"
                  stroke={SEVERITY_COLORS.low}
                  strokeWidth={4}
                  dot={{ r: 6, fill: SEVERITY_COLORS.low, strokeWidth: 2, stroke: "#ffffff" }}
                  activeDot={{ r: 8, stroke: SEVERITY_COLORS.low, strokeWidth: 3, fill: "#ffffff" }}
                  name="Low"
                />
              </LineChart>
            </ResponsiveContainer>
          </div>
        </CardContent>
      </Card>
    </div>
  )
}
