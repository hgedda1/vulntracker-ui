"use client"

import { useState, useMemo, useEffect } from "react"
import { Input } from "@/components/ui/input"
import { Button } from "@/components/ui/button"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { VulnerabilityTable } from "@/components/vulnerability-table"
import { VulnerabilityTiles } from "@/components/vulnerability-tiles"
import { ExportButtons } from "@/components/export-buttons"
import { StatsCards } from "@/components/stats-cards"
import { VulnerabilityCharts } from "@/components/vulnerability-charts"
import { AlertTriangle, Filter, Search, Grid, List, BarChart3 } from "lucide-react"
import type { Vulnerability } from "@/types/vulnerability"

// Export this interface so other components can use it
export interface VulnerabilityWithSeverity extends Vulnerability {
  severity: string
}

interface VulnerabilityDashboardProps {
  vulnerabilities: Vulnerability[]
  source: "vercel-api" | "proxy" | "local" | null
}

export function VulnerabilityDashboard({ vulnerabilities, source }: VulnerabilityDashboardProps) {
  const [searchQuery, setSearchQuery] = useState("")
  const [sortBy, setSortBy] = useState("dateAdded")
  const [sortOrder, setSortOrder] = useState<"asc" | "desc">("desc")
  const [filterBySeverity, setFilterBySeverity] = useState("all")
  const [viewMode, setViewMode] = useState<"table" | "tiles" | "charts">("charts")
  const [currentPage, setCurrentPage] = useState(1)
  const [overdueCVEs, setOverdueCVEs] = useState<Vulnerability[]>([])

  const itemsPerPage = 50

  const getSeverityLevel = (vuln: Vulnerability): string => {
    const description = vuln.shortDescription?.toLowerCase() || ""
    const name = vuln.vulnerabilityName?.toLowerCase() || ""

    if (
      description.includes("critical") ||
      name.includes("critical") ||
      description.includes("remote code execution") ||
      description.includes("rce")
    )
      return "critical"

    if (
      description.includes("high") ||
      name.includes("high") ||
      description.includes("privilege escalation") ||
      description.includes("authentication bypass")
    )
      return "high"

    if (
      description.includes("medium") ||
      name.includes("medium") ||
      description.includes("information disclosure") ||
      description.includes("denial of service")
    )
      return "medium"

    return "low"
  }

  const processed = useMemo(() => {
    return vulnerabilities.map((vuln) => ({
      ...vuln,
      severity: getSeverityLevel(vuln),
    }))
  }, [vulnerabilities])

  useEffect(() => {
    const today = new Date()
    const overdue = processed.filter((vuln) => new Date(vuln.dueDate) < today)
    setOverdueCVEs(overdue)
  }, [processed])

  useEffect(() => {
    setCurrentPage(1)
  }, [searchQuery, filterBySeverity, sortBy, sortOrder])

  const filteredAndSorted = useMemo(() => {
    return processed
      .filter((vuln) => {
        const searchString =
          `${vuln.cveID} ${vuln.vendorProject} ${vuln.product} ${vuln.vulnerabilityName} ${vuln.shortDescription}`.toLowerCase()
        const matchesSearch = searchString.includes(searchQuery.toLowerCase())
        const matchesSeverity = filterBySeverity === "all" || vuln.severity === filterBySeverity
        return matchesSearch && matchesSeverity
      })
      .sort((a, b) => {
        let aValue: string | number = ""
        let bValue: string | number = ""

        switch (sortBy) {
          case "dateAdded":
            aValue = new Date(a.dateAdded).getTime()
            bValue = new Date(b.dateAdded).getTime()
            break
          case "dueDate":
            aValue = new Date(a.dueDate).getTime()
            bValue = new Date(b.dueDate).getTime()
            break
          case "cveID":
            aValue = a.cveID
            bValue = b.cveID
            break
          case "vendor":
            aValue = a.vendorProject
            bValue = b.vendorProject
            break
          default:
            aValue = a.dateAdded
            bValue = b.dateAdded
        }

        if (typeof aValue === "string" && typeof bValue === "string") {
          return sortOrder === "asc" ? aValue.localeCompare(bValue) : bValue.localeCompare(aValue)
        }

        return sortOrder === "asc" ? (aValue as number) - (bValue as number) : (bValue as number) - (aValue as number)
      })
  }, [processed, searchQuery, sortBy, sortOrder, filterBySeverity])

  const paginatedVulnerabilities = useMemo(() => {
    return filteredAndSorted.slice((currentPage - 1) * itemsPerPage, currentPage * itemsPerPage)
  }, [filteredAndSorted, currentPage])

  const totalFiltered = filteredAndSorted.length

  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 to-slate-100">
      <div className="container mx-auto p-6 space-y-8">
        {/* Header Section */}
        <div className="bg-white rounded-xl shadow-sm border p-6">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4">
            <div>
              <h1 className="text-4xl font-bold bg-gradient-to-r from-slate-900 to-slate-600 bg-clip-text text-transparent">
                Vulnerability Management Dashboard
              </h1>
              <p className="text-slate-600 mt-2 flex items-center gap-2">
                <div className={`w-2 h-2 rounded-full ${source === "vercel-api" ? "bg-green-500" : source === "proxy" ? "bg-yellow-500" : "bg-blue-500"}`} />
                Data Source: {source === "vercel-api" ? "Vercel API (Live)" : source === "proxy" ? "Local Proxy (Dev)" : "Local JSON file"}
              </p>
            </div>
            <ExportButtons vulnerabilities={filteredAndSorted} />
          </div>
        </div>

        {/* Alert Section */}
        {typeof window !== "undefined" && overdueCVEs.length > 0 && (
          <Card className="border-red-200 bg-gradient-to-r from-red-50 to-red-100 shadow-sm">
            <CardContent className="pt-4">
              <div className="flex items-center space-x-3">
                <div className="p-2 bg-red-100 rounded-full">
                  <AlertTriangle className="h-5 w-5 text-red-600" />
                </div>
                <div>
                  <span className="text-red-800 font-semibold text-lg">
                    SLA Alert: {overdueCVEs.length} CVE{overdueCVEs.length > 1 ? "s" : ""} past due date
                  </span>
                  <p className="text-red-600 text-sm mt-1">Immediate attention required for overdue vulnerabilities</p>
                </div>
              </div>
            </CardContent>
          </Card>
        )}

        {/* Stats Cards - Always show stats for all vulnerabilities */}
        <StatsCards vulnerabilities={vulnerabilities} />

        {/* Filters Section */}
        <Card className="shadow-sm border-0 bg-white">
          <CardHeader className="bg-gradient-to-r from-slate-50 to-slate-100 rounded-t-lg">
            <CardTitle className="flex items-center space-x-2 text-slate-800">
              <Filter className="h-5 w-5" />
              <span>Filters & Search</span>
            </CardTitle>
          </CardHeader>
          <CardContent className="p-6">
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
              <div className="relative">
                <Search className="absolute left-3 top-3 h-4 w-4 text-slate-400" />
                <Input
                  placeholder="Search vulnerabilities..."
                  value={searchQuery}
                  onChange={(e) => setSearchQuery(e.target.value)}
                  className="pl-10 border-slate-200 focus:border-slate-400 focus:ring-slate-400"
                />
              </div>

              <Select value={sortBy} onValueChange={setSortBy}>
                <SelectTrigger className="border-slate-200 focus:border-slate-400 focus:ring-slate-400">
                  <SelectValue placeholder="Sort by" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="dateAdded">Date Added</SelectItem>
                  <SelectItem value="dueDate">Due Date</SelectItem>
                  <SelectItem value="cveID">CVE ID</SelectItem>
                  <SelectItem value="vendor">Vendor</SelectItem>
                </SelectContent>
              </Select>

              <Select value={sortOrder} onValueChange={(value: "asc" | "desc") => setSortOrder(value)}>
                <SelectTrigger className="border-slate-200 focus:border-slate-400 focus:ring-slate-400">
                  <SelectValue placeholder="Order" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="desc">Descending</SelectItem>
                  <SelectItem value="asc">Ascending</SelectItem>
                </SelectContent>
              </Select>

              <Select value={filterBySeverity} onValueChange={setFilterBySeverity}>
                <SelectTrigger className="border-slate-200 focus:border-slate-400 focus:ring-slate-400">
                  <SelectValue placeholder="Filter by severity" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="all">All Severities</SelectItem>
                  <SelectItem value="critical">Critical</SelectItem>
                  <SelectItem value="high">High</SelectItem>
                  <SelectItem value="medium">Medium</SelectItem>
                  <SelectItem value="low">Low</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </CardContent>
        </Card>

        {/* Data View Section */}
        <Card className="shadow-sm border-0 bg-white">
          <CardHeader className="bg-gradient-to-r from-slate-50 to-slate-100 rounded-t-lg">
            <div className="flex items-center justify-between">
              <CardTitle className="text-slate-800">
                {viewMode === "charts"
                  ? `Vulnerability Analytics (${totalFiltered} total)`
                  : `Vulnerabilities (${(currentPage - 1) * itemsPerPage + 1}-${Math.min(currentPage * itemsPerPage, totalFiltered)} of ${totalFiltered})`}
              </CardTitle>

              <div className="flex items-center space-x-2">
                <Button
                  variant={viewMode === "charts" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setViewMode("charts")}
                  className={
                    viewMode === "charts" ? "bg-slate-900 hover:bg-slate-800" : "border-slate-200 hover:bg-slate-50"
                  }
                >
                  <BarChart3 className="h-4 w-4 mr-2" />
                  Charts
                </Button>
                <Button
                  variant={viewMode === "table" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setViewMode("table")}
                  className={
                    viewMode === "table" ? "bg-slate-900 hover:bg-slate-800" : "border-slate-200 hover:bg-slate-50"
                  }
                >
                  <List className="h-4 w-4 mr-2" />
                  Table
                </Button>
                <Button
                  variant={viewMode === "tiles" ? "default" : "outline"}
                  size="sm"
                  onClick={() => setViewMode("tiles")}
                  className={
                    viewMode === "tiles" ? "bg-slate-900 hover:bg-slate-800" : "border-slate-200 hover:bg-slate-50"
                  }
                >
                  <Grid className="h-4 w-4 mr-2" />
                  Tiles
                </Button>
              </div>
            </div>
          </CardHeader>
          <CardContent className="p-6">
            {/* Render the appropriate view based on viewMode */}
            {viewMode === "charts" ? (
              <VulnerabilityCharts vulnerabilities={filteredAndSorted} getSeverityLevel={getSeverityLevel} />
            ) : viewMode === "table" ? (
              <VulnerabilityTable vulnerabilities={paginatedVulnerabilities} />
            ) : (
              <VulnerabilityTiles vulnerabilities={paginatedVulnerabilities} />
            )}

            {/* Pagination - Only show for table and tiles views */}
            {viewMode !== "charts" && (
              <div className="mt-6 flex justify-between items-center pt-4 border-t border-slate-100">
                <p className="text-sm text-slate-600">
                  Page {currentPage} of {Math.ceil(totalFiltered / itemsPerPage)}
                </p>
                <div className="flex space-x-2">
                  <Button
                    variant="outline"
                    size="sm"
                    disabled={currentPage === 1}
                    onClick={() => setCurrentPage((prev) => prev - 1)}
                    className="border-slate-200 hover:bg-slate-50"
                  >
                    Previous
                  </Button>
                  <Button
                    variant="outline"
                    size="sm"
                    disabled={currentPage >= Math.ceil(totalFiltered / itemsPerPage)}
                    onClick={() => setCurrentPage((prev) => prev + 1)}
                    className="border-slate-200 hover:bg-slate-50"
                  >
                    Next
                  </Button>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  )
}
