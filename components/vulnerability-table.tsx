"use client"

import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { ExternalLink, Calendar, AlertTriangle } from "lucide-react"
import type { Vulnerability } from "@/types/vulnerability"
import type { VulnerabilityWithSeverity } from "@/components/vulnerability-dashboard" // Import the extended type

interface VulnerabilityTableProps {
  vulnerabilities: VulnerabilityWithSeverity[] // Use the extended type
}

export function VulnerabilityTable({ vulnerabilities }: VulnerabilityTableProps) {
  // Removed getSeverityBadge as severity is now directly available on vuln object

  const getRiskScore = (vuln: Vulnerability): number => {
    const description = vuln.shortDescription.toLowerCase()
    const name = vuln.vulnerabilityName.toLowerCase()
    const isRansomware = vuln.knownRansomwareCampaignUse === "Known"

    let score = 5 // Base score

    if (description.includes("critical") || name.includes("critical")) score += 4
    else if (description.includes("high") || name.includes("high")) score += 3
    else if (description.includes("medium") || name.includes("medium")) score += 2

    if (description.includes("remote code execution")) score += 3
    if (description.includes("privilege escalation")) score += 2
    if (isRansomware) score += 2

    const daysSinceAdded = Math.floor((Date.now() - new Date(vuln.dateAdded).getTime()) / (1000 * 60 * 60 * 24))
    if (daysSinceAdded > 30) score += 1

    return Math.min(score, 10)
  }

  const isOverdue = (dueDate: string): boolean => {
    return new Date(dueDate) < new Date()
  }

  return (
    <div className="overflow-x-auto rounded-lg border border-slate-200">
      <Table>
        <TableHeader>
          <TableRow className="bg-slate-50 hover:bg-slate-50">
            <TableHead className="font-semibold text-slate-700">CVE ID</TableHead>
            <TableHead className="font-semibold text-slate-700">Vendor/Product</TableHead>
            <TableHead className="font-semibold text-slate-700">Vulnerability</TableHead>
            <TableHead className="font-semibold text-slate-700">Severity</TableHead>
            <TableHead className="font-semibold text-slate-700">Risk Score</TableHead>
            <TableHead className="font-semibold text-slate-700">Date Added</TableHead>
            <TableHead className="font-semibold text-slate-700">Due Date</TableHead>
            <TableHead className="font-semibold text-slate-700">Ransomware</TableHead>
            <TableHead className="font-semibold text-slate-700">Actions</TableHead>
          </TableRow>
        </TableHeader>
        <TableBody>
          {vulnerabilities.map((vuln) => (
            <TableRow
              key={vuln.cveID}
              className={`hover:bg-slate-50 transition-colors ${isOverdue(vuln.dueDate) ? "bg-red-50 hover:bg-red-100" : ""}`}
            >
              <TableCell className="font-mono font-medium">
                <div className="flex items-center space-x-2">
                  <span className="text-slate-900">{vuln.cveID}</span>
                  {isOverdue(vuln.dueDate) && <AlertTriangle className="h-4 w-4 text-red-500" />}
                </div>
              </TableCell>
              <TableCell>
                <div>
                  <div className="font-medium text-slate-900">{vuln.vendorProject}</div>
                  <div className="text-sm text-slate-500">{vuln.product}</div>
                </div>
              </TableCell>
              <TableCell>
                <div className="max-w-xs">
                  <div className="font-medium truncate text-slate-900">{vuln.vulnerabilityName}</div>
                  <div className="text-sm text-slate-500 truncate">{vuln.shortDescription}</div>
                </div>
              </TableCell>
              <TableCell>
                {/* Use vuln.severity directly */}
                {vuln.severity === "critical" && (
                  <Badge className="bg-red-500 hover:bg-red-600 text-white">Critical</Badge>
                )}
                {vuln.severity === "high" && (
                  <Badge className="bg-orange-500 hover:bg-orange-600 text-white">High</Badge>
                )}
                {vuln.severity === "medium" && (
                  <Badge className="bg-yellow-500 hover:bg-yellow-600 text-white">Medium</Badge>
                )}
                {vuln.severity === "low" && <Badge className="bg-green-500 hover:bg-green-600 text-white">Low</Badge>}
              </TableCell>
              <TableCell>
                <div className="flex items-center space-x-2">
                  <div
                    className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm font-bold ${
                      getRiskScore(vuln) >= 8
                        ? "bg-red-500"
                        : getRiskScore(vuln) >= 6
                          ? "bg-orange-500"
                          : getRiskScore(vuln) >= 4
                            ? "bg-yellow-500"
                            : "bg-green-500"
                    }`}
                  >
                    {getRiskScore(vuln)}
                  </div>
                </div>
              </TableCell>
              <TableCell>
                <div className="flex items-center space-x-1 text-slate-600">
                  <Calendar className="h-4 w-4" />
                  <span>{vuln.dateAdded}</span>
                </div>
              </TableCell>
              <TableCell>
                <div
                  className={`flex items-center space-x-1 ${isOverdue(vuln.dueDate) ? "text-red-600" : "text-slate-600"}`}
                >
                  <Calendar className="h-4 w-4" />
                  <span>{vuln.dueDate}</span>
                </div>
              </TableCell>
              <TableCell>
                {vuln.knownRansomwareCampaignUse === "Known" ? (
                  <Badge className="bg-red-500 hover:bg-red-600 text-white">Known</Badge>
                ) : (
                  <Badge variant="secondary" className="bg-slate-100 text-slate-700">
                    Unknown
                  </Badge>
                )}
              </TableCell>
              <TableCell>
                <Button
                  variant="outline"
                  size="sm"
                  onClick={() => window.open(`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${vuln.cveID}`, "_blank")}
                  className="border-slate-200 hover:bg-slate-50"
                >
                  <ExternalLink className="h-4 w-4 mr-1" />
                  View CVE
                </Button>
              </TableCell>
            </TableRow>
          ))}
        </TableBody>
      </Table>
    </div>
  )
}
